{"ast":null,"code":"export default function getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n  const edges = graph[start];\n\n  if (visitRoute && start === end) {\n    // We found the path\n    console.log(' visitRoute ', visitRoute + end + '=' + count);\n    return visitRoute + end + '=' + count;\n  }\n\n  if (!edges) {\n    // deadend\n    return '';\n  }\n\n  if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n    // already visited route; we don't allow since it'll go in infiinte cycle\n    return '';\n  }\n\n  visitRoute += start;\n  console.log('visitRoute after add start', visitRoute);\n  return Object.keys(edges).map(node => {\n    console.log(node); // No 0 cost routes should be included as per requirements\n\n    if (edges[node] === 0) {\n      return '';\n    } //node b // vr e //count \n\n\n    console.log(edges[node]);\n    console.log(count + edges[node]);\n    const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node]);\n    return route;\n  }).filter(empty => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/util/possiblePath.js"],"names":["getPossiblePaths","start","end","graph","visitRoute","count","edges","console","log","indexOf","length","Object","keys","map","node","route","filter","empty","join"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,KAAtC,EAA6CC,UAAU,GAAG,EAA1D,EAA8DC,KAAK,GAAG,CAAtE,EAAyE;AACpF,QAAMC,KAAK,GAAGH,KAAK,CAACF,KAAD,CAAnB;;AACA,MAAIG,UAAU,IAAIH,KAAK,KAAKC,GAA5B,EAAiC;AAC7B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,UAAU,GAAGF,GAAb,GAAmB,GAAnB,GAAyBG,KAArD;AACA,WAAOD,UAAU,GAAGF,GAAb,GAAmB,GAAnB,GAAyBG,KAAhC;AACH;;AAED,MAAI,CAACC,KAAL,EAAY;AACR;AACA,WAAO,EAAP;AACH;;AAED,MAAIF,UAAU,CAACK,OAAX,CAAmBL,UAAU,CAACA,UAAU,CAACM,MAAX,GAAoB,CAArB,CAAV,GAAoCT,KAAvD,KAAiE,CAArE,EAAwE;AACpE;AACA,WAAO,EAAP;AACH;;AAGDG,EAAAA,UAAU,IAAIH,KAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CJ,UAA1C;AAGA,SAAOO,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAwBC,IAAD,IAAU;AACpCP,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ,EADoC,CAEpC;;AACA,QAAIR,KAAK,CAACQ,IAAD,CAAL,KAAgB,CAApB,EAAuB;AACnB,aAAO,EAAP;AACH,KALmC,CAMpC;;;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACQ,IAAD,CAAjB;AAEAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,GAAGC,KAAK,CAACQ,IAAD,CAAzB;AACA,UAAMC,KAAK,GAAGf,gBAAgB,CAACc,IAAD,EAAOZ,GAAP,EAAYC,KAAZ,EAAmBC,UAAnB,EAA+BC,KAAK,GAAGC,KAAK,CAACQ,IAAD,CAA5C,CAA9B;AAEA,WAAOC,KAAP;AACH,GAbM,EAaJC,MAbI,CAaIC,KAAD,IAAW,CAAC,CAACA,KAbhB,EAauBC,IAbvB,CAa4B,GAb5B,CAAP,CAvBoF,CAoC3C;AAC5C","sourcesContent":["export default function getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n    const edges = graph[start];\n    if (visitRoute && start === end) {\n        // We found the path\n        console.log(' visitRoute ', visitRoute + end + '=' + count)\n        return visitRoute + end + '=' + count;\n    }\n\n    if (!edges) {\n        // deadend\n        return '';\n    }\n\n    if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n        // already visited route; we don't allow since it'll go in infiinte cycle\n        return '';\n    }\n\n\n    visitRoute += start;\n    console.log('visitRoute after add start', visitRoute)\n\n\n    return Object.keys(edges).map((node) => {\n        console.log(node);\n        // No 0 cost routes should be included as per requirements\n        if (edges[node] === 0) {\n            return '';\n        }\n        //node b // vr e //count \n        console.log(edges[node])\n\n        console.log(count + edges[node])\n        const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node]);\n\n        return route;\n    }).filter((empty) => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}\n"]},"metadata":{},"sourceType":"module"}