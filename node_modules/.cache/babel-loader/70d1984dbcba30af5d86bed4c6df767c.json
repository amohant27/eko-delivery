{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { parsedInput } from '../../util/directedGraph';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleRoutes = this.getPossibleRoutes.bind(this);\n  }\n\n  getPossibleNodes() {\n    console.log(this.srcInput.value);\n    console.log(this.destInput.value);\n    this.getPossiblePaths();\n  }\n\n  getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n    const edges = graph[start];\n    console.log('edges', edges);\n\n    if (visitRoute && start === end) {\n      // We found the path\n      console.log(' visitRoute ', visitRoute + end + '=' + count);\n      return visitRoute + end + '=' + count;\n    }\n\n    if (!edges) {\n      // deadend\n      return '';\n    }\n\n    if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n      // already visited route; we don't allow since it'll go in infiinte cycle\n      return '';\n    }\n\n    console.log('visitRoute after index', visitRoute);\n    visitRoute += start;\n    console.log('visitRoute after add start', visitRoute);\n    return Object.keys(edges).map(node => {\n      console.log(node); // No 0 cost routes should be included as per requirements\n\n      if (edges[node] === 0) {\n        return '';\n      } //node b // vr e //count \n\n\n      console.log(edges[node]);\n      console.log(count + edges[node]);\n      const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node]);\n      return route;\n    }).filter(empty => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Source : \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" Destination: \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Find All PossibleRoutes\"));\n  }\n\n}\n\nexport default PossibleRoutes;","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","parsedInput","PossibleRoutes","constructor","props","srcInput","createRef","destInput","getPossibleRoutes","bind","getPossibleNodes","console","log","value","getPossiblePaths","start","end","graph","visitRoute","count","edges","indexOf","length","Object","keys","map","node","route","filter","empty","join","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  {\n    parsedInput\n} from '../../util/directedGraph';\nclass PossibleRoutes extends Component{\n    constructor(props){\n        super(props);\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleRoutes = this.getPossibleRoutes.bind(this);\n    }\n\n    getPossibleNodes(){\n        console.log(this.srcInput.value);\n        console.log(this.destInput.value);\n        this.getPossiblePaths()\n\n    }\n\n    getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n\n\n    const edges = graph[start];\n    console.log('edges', edges)\n    if (visitRoute && start === end) {\n        // We found the path\n        console.log(' visitRoute ', visitRoute + end + '=' + count)\n        return visitRoute + end + '=' + count;\n    }\n\n    if (!edges) {\n        // deadend\n        return '';\n    }\n\n    if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n        // already visited route; we don't allow since it'll go in infiinte cycle\n        return '';\n    }\n\n    console.log('visitRoute after index', visitRoute)\n\n    visitRoute += start;\n    console.log('visitRoute after add start', visitRoute)\n\n\n    return Object.keys(edges).map((node) => {\n        console.log(node);\n        // No 0 cost routes should be included as per requirements\n        if (edges[node] === 0) {\n            return '';\n        }\n        //node b // vr e //count \n        console.log(edges[node])\n\n        console.log(count + edges[node])\n        const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node]);\n\n        return route;\n    }).filter((empty) => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}\n\n    \n \n\n    render(){\n        return(\n                <div>\n                \n                <div> \n                <label>Source : </label>\n                    <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n                </div>\n                <div> \n                    <label> Destination: </label>\n                    <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n                </div>\n\n                <button type=\"button\" onClick={this.getPossibleNodes.bind(this)} >\n                    Find All PossibleRoutes\n                    </button>\n                </div>\n        )   \n    }\n}\n\nexport default PossibleRoutes;"]},"metadata":{},"sourceType":"module"}