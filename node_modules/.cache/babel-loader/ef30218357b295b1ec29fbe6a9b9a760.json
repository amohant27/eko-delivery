{"ast":null,"code":"export default function getPossiblePaths(start, end, inputGraph, visi = '', cost = 0) {\n  const edges = inputGraph[start];\n\n  if (visi && start === end) {\n    // We found the path\n    console.log('we found the path' + visi + end + '=' + cost);\n    return visi + end + '=' + cost;\n  }\n\n  if (!edges) {\n    console.log('we hit deadend , all nodes visited');\n    return '';\n  }\n\n  if (visi.indexOf(visi[visi.length - 1] + start) >= 0) {\n    console.log('visi if present index', visi);\n    console.log(' already visited route we dont allow since it ll go in infiinte cycle');\n    return '';\n  }\n\n  visi += start;\n  return Object.keys(edges).map(node => {\n    console.log('NODE', node, edges); // No 0 cost routes should be included as per requirements\n\n    if (edges[node] === 0) {\n      return '';\n    }\n\n    const route = getPossiblePaths(node, end, inputGraph, visi, cost + edges[node] + ':');\n    return route;\n  }).filter(empty => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/util/possiblePath.js"],"names":["getPossiblePaths","start","end","inputGraph","visi","cost","edges","console","log","indexOf","length","Object","keys","map","node","route","filter","empty","join"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,UAAtC,EAAkDC,IAAI,GAAG,EAAzD,EAA6DC,IAAI,GAAG,CAApE,EAAuE;AAClF,QAAMC,KAAK,GAAGH,UAAU,CAACF,KAAD,CAAxB;;AAGA,MAAIG,IAAI,IAAIH,KAAK,KAAKC,GAAtB,EAA2B;AACvB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBJ,IAArB,GAA4BF,GAA5B,GAAkC,GAAlC,GAAwCG,IAApD;AACA,WAAOD,IAAI,GAAGF,GAAP,GAAa,GAAb,GAAmBG,IAA1B;AACH;;AAED,MAAI,CAACC,KAAL,EAAY;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAO,EAAP;AACH;;AACA,MAAIJ,IAAI,CAACK,OAAL,CAAaL,IAAI,CAACA,IAAI,CAACM,MAAL,GAAc,CAAf,CAAJ,GAAwBT,KAArC,KAA+C,CAAnD,EAAsD;AACnDM,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCJ,IAArC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,uEAAZ;AACA,WAAO,EAAP;AACH;;AAGDJ,EAAAA,IAAI,IAAIH,KAAR;AAEA,SAAOU,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAwBC,IAAD,IAAU;AACpCP,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBM,IAAnB,EAAwBR,KAAxB,EADoC,CAEpC;;AACA,QAAIA,KAAK,CAACQ,IAAD,CAAL,KAAgB,CAApB,EAAuB;AACnB,aAAO,EAAP;AACH;;AACD,UAAMC,KAAK,GAAGf,gBAAgB,CAACc,IAAD,EAAOZ,GAAP,EAAYC,UAAZ,EAAwBC,IAAxB,EAA8BC,IAAI,GAAGC,KAAK,CAACQ,IAAD,CAAZ,GAAoB,GAAlD,CAA9B;AAEA,WAAOC,KAAP;AACH,GATM,EASJC,MATI,CASIC,KAAD,IAAW,CAAC,CAACA,KAThB,EASuBC,IATvB,CAS4B,GAT5B,CAAP,CAvBkF,CAgCzC;AAC5C","sourcesContent":["export default function getPossiblePaths(start, end, inputGraph, visi = '', cost = 0) {\n    const edges = inputGraph[start];\n   \n    \n    if (visi && start === end) {\n        // We found the path\n        console.log('we found the path'+ visi + end + '=' + cost)\n        return visi + end + '=' + cost;\n    }\n\n    if (!edges) {\n        console.log('we hit deadend , all nodes visited')\n        return '';\n    }\n     if (visi.indexOf(visi[visi.length - 1] + start) >= 0) {\n        console.log('visi if present index', visi);\n        console.log(' already visited route we dont allow since it ll go in infiinte cycle');\n        return '';\n    }\n\n\n    visi += start;\n\n    return Object.keys(edges).map((node) => {\n        console.log('NODE',node,edges);\n        // No 0 cost routes should be included as per requirements\n        if (edges[node] === 0) {\n            return '';\n        }  \n        const route = getPossiblePaths(node, end, inputGraph, visi, cost + edges[node] +':');\n      \n        return route;\n    }).filter((empty) => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}\n"]},"metadata":{},"sourceType":"module"}