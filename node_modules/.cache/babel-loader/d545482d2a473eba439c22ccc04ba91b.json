{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleArr\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n  }\n\n  getPossibleNodes() {\n    console.log(this.srcInput.value);\n    console.log(this.destInput.value);\n    var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n    console.log('ROUTES', routes.split(';'));\n    const routesArr = routes.split(';');\n    const onlyPossibleArr = [];\n    routesArr.map((route, i) => {\n      console.log(route);\n      const routePerNode = route.split('=');\n      console.log('routePernode', routePerNode);\n      const formedRoute = this.getRoutes(routePerNode[0]);\n      onlyPossibleArr.push(formedRoute);\n      return routePerNode;\n    });\n    console.log(onlyPossibleArr);\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      console.log(str[i] + '->');\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        sym = \"->\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" Calculate\\u200B \\u200Bthe\\u200B \\u200Bnumber\\u200B \\u200Bof\\u200B \\u200Bpossible\\u200B \\u200Bdelivery\\u200B \\u200Broute\\u200B\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Source : \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Destination: \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Find All PossibleRoutes\"), this.state.routes > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"The number of PossibleRoutes are : \", this.getRoutes, \" \"));\n  }\n\n}\n\nexport default PossibleRoutes;","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleArr","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","console","log","value","split","routesArr","map","route","i","routePerNode","formedRoute","push","str","newStr","length","sym","append","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  {\n    parsedInput\n} from '../../util/directedGraph';\nimport \n    getPossiblePaths\nfrom '../../util/possiblePath'\nclass PossibleRoutes extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            routes : '',\n            onlyPossibleArr\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n    }\n\n    getPossibleNodes(){\n        console.log(this.srcInput.value);\n        console.log(this.destInput.value);\n        var routes =  getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n        console.log('ROUTES',routes.split(';'));\n        const routesArr = routes.split(';');\n        const onlyPossibleArr  = [];\n\n        routesArr.map((route, i) => {\n            console.log(route)\n            const routePerNode = route.split('=');\n            console.log('routePernode',routePerNode);\n            const formedRoute = this.getRoutes(routePerNode[0]);\n            onlyPossibleArr.push(formedRoute);\n            return routePerNode;\n        });\n\n\n\n        console.log(onlyPossibleArr);\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        for (var i = 0; i <= str.length - 1; i++) {\n            console.log(str[i] + '->');\n            let sym = '';\n            if (i !== str.length - 1) {\n                sym = \"->\"\n            }\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n\n        return newStr;\n    }\n\n\n   \n\n\n\n    render(){\n       \n        return(\n                <div>\n                <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n                <div> \n                <label>Source : </label>\n                    <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n                </div>\n                <div> \n                    <label> Destination: </label>\n                    <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n                </div>\n\n                <button type=\"button\" onClick={this.getPossibleNodes.bind(this)} >\n                    Find All PossibleRoutes\n                </button>\n\n                {this.state.routes > 0 && <div>The number of PossibleRoutes are : {this.getRoutes} </div>}\n                </div>\n        )   \n    }\n}\n\nexport default PossibleRoutes;"]},"metadata":{},"sourceType":"module"}