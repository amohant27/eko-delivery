{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './style.css';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleRoutesArr: [],\n      routesArr: '',\n      cheapestRoute: '',\n      showCheapestRoutes: false\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n    this.getCheapestRoute = this.getCheapestRoute.bind(this);\n    this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n  }\n\n  getPossibleNodes(maxStops) {\n    if (this.srcInput.value && this.destInput.value) var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n    const routesArr = routes.split(';');\n    const onlyPossibleRoutesArr = [];\n    const onlyRoutesWithMaxFourST = [];\n    this.setState({\n      routesArr: routes\n    });\n    routesArr.map((route, i) => {\n      const routePerNode = route.split('=');\n      console.log(maxStops === 4);\n\n      if (maxStops === 4 && routePerNode[0].length <= 5) {\n        const routeWithFourStops = this.getRoutes(routePerNode[0]);\n        onlyRoutesWithMaxFourST.push(routeWithFourStops);\n        this.setState({\n          onlyPossibleRoutesArr: onlyRoutesWithMaxFourST\n        });\n      } else {\n        const formedRoute = this.getRoutes(routePerNode[0]);\n        onlyPossibleRoutesArr.push(formedRoute);\n        this.setState({\n          onlyPossibleRoutesArr: onlyPossibleRoutesArr\n        });\n      }\n\n      return routePerNode;\n    });\n    this.getCheapestRoute(routesArr);\n  }\n\n  getCheapestRoute(routes) {\n    var routeCostArr = [];\n    routes.map(item => {\n      item = item.split('=');\n      var route = item[0];\n      var costs = item[1];\n      var totalCost = 0;\n      costs = costs.split(':');\n\n      for (var i = 0; i < costs.length; i++) {\n        totalCost += Number(costs[i]);\n      }\n\n      var routeCostObj = {\n        'path': route,\n        'cost': totalCost\n      };\n      routeCostArr.push(routeCostObj); // sort by value\n\n      routeCostArr.sort(function (a, b) {\n        return a.cost - b.cost;\n      });\n      console.log(routeCostArr);\n      this.setState({\n        cheapestRoute: routeCostArr[0]\n      });\n      return routeCostArr;\n    });\n  }\n\n  showCheapestRoutes() {\n    this.setState({\n      showCheapestRoutes: true\n    });\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        sym = \"-\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    let routesFormed = '';\n\n    if (this.state.onlyPossibleRoutesArr.length > 0) {\n      routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n        // return <li key={route.toString()} >Route No {index + 1} : {route}</li>;\n        return React.createElement(ListGroup.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, route);\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"pathModule\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Source : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"source\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Destination : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"destination\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 'no'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Find All Possible Routes\"))), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Find All PossibleRoutes with 4 max stops\")))), this.state.onlyPossibleRoutesArr.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"We found \", this.state.onlyPossibleRoutesArr.length, \" Routes for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"The number of PossibleRoutes are : \", routesFormed)), this.state.showCheapestRoutes && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"We found the cheapest route for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Take \", this.state.cheapestRoute.path, \" which will cost you \", this.state.cheapestRoute.cost))));\n  }\n\n}\n\nexport default PossibleRoutes; //   <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n//                 <div>\n//                     <label>Source : </label>\n//                     <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n//                 </div>\n//                 <div>\n//                     <label> Destination: </label>\n//                     <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 'no')} >\n//                         Find All PossibleRoutes\n//                     </button>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 4)}>\n//                         Find All PossibleRoutes with 4 max stops\n//                     </button>\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.showCheapestRoutes} >\n//                         Find the Cheapest Route\n//                 </button>\n//                 </div>\n//                 {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n//                     <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n//                     <div>The number of PossibleRoutes are : {routesFormed}</div>\n//                 </div>}\n//                 {this.state.showCheapestRoutes && <div>\n//                     <div>We found the cheapest route for you.</div>\n//                     <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n//                 </div>}\n//             </div>","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","Container","Form","ButtonToolbar","Button","Row","Col","FormLabel","ListGroup","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleRoutesArr","routesArr","cheapestRoute","showCheapestRoutes","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","getCheapestRoute","maxStops","value","split","onlyRoutesWithMaxFourST","setState","map","route","i","routePerNode","console","log","length","routeWithFourStops","push","formedRoute","routeCostArr","item","costs","totalCost","Number","routeCostObj","sort","a","b","cost","str","newStr","sym","append","render","routesFormed","index","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './style.css';\nimport {\n    parsedInput\n} from '../../util/directedGraph';\nimport\ngetPossiblePaths\n    from '../../util/possiblePath';\nclass PossibleRoutes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routes: '',\n            onlyPossibleRoutesArr: [],\n            routesArr: '',\n            cheapestRoute: '',\n            showCheapestRoutes: false,\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n        this.getCheapestRoute = this.getCheapestRoute.bind(this);\n        this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n    }\n\n\n    getPossibleNodes(maxStops) {\n        if (this.srcInput.value && this.destInput.value)\n        var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n        const routesArr = routes.split(';');\n        const onlyPossibleRoutesArr = [];\n        const onlyRoutesWithMaxFourST = [];\n        this.setState({ routesArr: routes });\n\n        routesArr.map((route, i) => {\n            const routePerNode = route.split('=');\n            console.log(maxStops === 4);\n            if (maxStops === 4 && routePerNode[0].length <= 5) {\n                const routeWithFourStops = this.getRoutes(routePerNode[0]);\n                onlyRoutesWithMaxFourST.push(routeWithFourStops);\n                this.setState({ onlyPossibleRoutesArr: onlyRoutesWithMaxFourST })\n            } else {\n                const formedRoute = this.getRoutes(routePerNode[0]);\n                onlyPossibleRoutesArr.push(formedRoute);\n                this.setState({ onlyPossibleRoutesArr: onlyPossibleRoutesArr })\n            }\n            return routePerNode;\n        });\n        this.getCheapestRoute(routesArr);\n    }\n\n\n    getCheapestRoute(routes) {\n        var routeCostArr = [];\n        routes.map((item) => {\n\n            item = item.split('=');\n            var route = item[0];\n            var costs = item[1];\n            var totalCost = 0;\n\n            costs = costs.split(':');\n            for (var i = 0; i < costs.length; i++) {\n                totalCost += Number(costs[i]);\n            }\n\n            var routeCostObj = { 'path': route, 'cost': totalCost };\n            routeCostArr.push(routeCostObj);\n\n            // sort by value\n            routeCostArr.sort(function (a, b) {\n                return a.cost - b.cost;\n            });\n\n            console.log(routeCostArr);\n            this.setState({ cheapestRoute: routeCostArr[0] })\n            return routeCostArr;\n\n        })\n\n    }\n\n    showCheapestRoutes() {\n        this.setState({ showCheapestRoutes: true })\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        for (var i = 0; i <= str.length - 1; i++) {\n            let sym = '';\n            if (i !== str.length - 1) {\n                sym = \"-\"\n            }\n\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n        return newStr;\n    }\n\n    render() {\n        let routesFormed = '';\n        if (this.state.onlyPossibleRoutesArr.length > 0) {\n            routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n                // return <li key={route.toString()} >Route No {index + 1} : {route}</li>;\n                return <ListGroup.Item>{route}</ListGroup.Item>\n            })\n        }\n\n\n        return (\n            <div>\n                <Container className=\"pathModule\" >\n                <br/>\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\">Source : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"source\" ref={(srcInput) => this.srcInput = srcInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\" >Destination : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"destination\" ref={(destInput) => this.destInput = destInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xs={4}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" active onClick={this.getPossibleNodes.bind(this, 'no')}>\n                                    Find All Possible Routes\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n                        <Col xs={7}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" active onClick={this.getPossibleNodes.bind(this, 4)}>\n                                     Find All PossibleRoutes with 4 max stops\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n\n                    </Row>\n\n                    {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n                        <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n                        <div>The number of PossibleRoutes are : {routesFormed}</div>\n                    </div>}\n\n\n                    {this.state.showCheapestRoutes && <div>\n                        <div>We found the cheapest route for you.</div>\n                        <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n                    </div>}\n\n                </Container>\n\n            </div>\n\n        )\n    }\n}\n\nexport default PossibleRoutes;\n\n\n//   <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n//                 <div>\n//                     <label>Source : </label>\n//                     <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n//                 </div>\n//                 <div>\n//                     <label> Destination: </label>\n//                     <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 'no')} >\n//                         Find All PossibleRoutes\n//                     </button>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 4)}>\n//                         Find All PossibleRoutes with 4 max stops\n//                     </button>\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.showCheapestRoutes} >\n//                         Find the Cheapest Route\n//                 </button>\n//                 </div>\n\n//                 {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n//                     <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n//                     <div>The number of PossibleRoutes are : {routesFormed}</div>\n//                 </div>}\n\n//                 {this.state.showCheapestRoutes && <div>\n//                     <div>We found the cheapest route for you.</div>\n//                     <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n//                 </div>}\n\n//             </div>"]},"metadata":{},"sourceType":"module"}