{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './PossibleRoutes.css';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleRoutesArr: [],\n      routesArr: '',\n      cheapestRoute: '',\n      showCheapestRoutes: false,\n      errorTxt: '',\n      showError: false\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n    this.getCheapestRoute = this.getCheapestRoute.bind(this);\n    this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n  }\n\n  getPossibleNodes(maxStops) {\n    let srcInput = this.srcInput.value.toUpperCase();\n    let destInput = this.destInput.value.toUpperCase();\n    const resultSource = /^[A-Za-z]$/.test(srcInput);\n    const resultDest = /^[A-Za-z]$/.test(destInput);\n\n    if (srcInput.length === 0 || destInput.length === 0) {\n      console.log('no length');\n      this.setState({\n        showError: true\n      });\n      this.setState({\n        errorTxt: 'Please provide the source/destination'\n      });\n    } else if (!resultSource || !resultDest) {\n      console.log('no match');\n      this.setState({\n        showError: true\n      });\n      this.setState({\n        errorTxt: 'Only Alphabets are allowed'\n      });\n    } else if (srcInput && destInput && resultSource && resultSource) {\n      var routes = getPossiblePaths(srcInput, destInput, parsedInput);\n\n      if (routes !== '') {\n        const routesArr = routes.split(';');\n        const onlyPossibleRoutesArr = [];\n        const onlyRoutesWithMaxFourST = [];\n        this.setState({\n          routesArr: routes\n        });\n        this.setState({\n          showError: false\n        });\n        routesArr.map((route, i) => {\n          const routePerNode = route.split('=');\n          console.log(maxStops === 4);\n\n          if (maxStops === 4 && routePerNode[0].length <= 5) {\n            const routeWithFourStops = this.getRoutes(routePerNode[0]);\n            onlyRoutesWithMaxFourST.push(routeWithFourStops);\n            this.setState({\n              onlyPossibleRoutesArr: onlyRoutesWithMaxFourST\n            });\n          } else {\n            const formedRoute = this.getRoutes(routePerNode[0]);\n            onlyPossibleRoutesArr.push(formedRoute);\n            this.setState({\n              onlyPossibleRoutesArr: onlyPossibleRoutesArr\n            });\n          }\n\n          return routePerNode;\n        });\n        this.getCheapestRoute(routesArr);\n      } else {\n        this.setState({\n          onlyPossibleRoutesArr: []\n        });\n        this.setState({\n          errorTxt: 'No Such Route'\n        });\n        this.setState({\n          showError: true\n        });\n      }\n    }\n  }\n\n  getCheapestRoute(routes) {\n    var routeCostArr = [];\n    routes.map(item => {\n      item = item.split('=');\n      var route = item[0];\n      var costs = item[1];\n      var totalCost = 0;\n      costs = costs.split(':');\n\n      for (var i = 0; i < costs.length; i++) {\n        totalCost += Number(costs[i]);\n      }\n\n      var routeCostObj = {\n        'path': route,\n        'cost': totalCost\n      };\n      routeCostArr.push(routeCostObj); // sort by value\n\n      routeCostArr.sort(function (a, b) {\n        return a.cost - b.cost;\n      });\n      this.setState({\n        cheapestRoute: routeCostArr[0]\n      });\n      return routeCostArr;\n    });\n  }\n\n  showCheapestRoutes() {\n    this.setState({\n      showCheapestRoutes: true\n    });\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        sym = \"-\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    let routesFormed = '';\n\n    if (this.state.onlyPossibleRoutesArr.length > 0) {\n      routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n        return React.createElement(ListGroup.Item, {\n          key: route.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, route);\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"pathModule\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"module\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Source : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"source\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Destination : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"destination\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), this.state.showError && React.createElement(FormLabel, {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" \", this.state.errorTxt), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      id: \"findNodesBtn\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 'no'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Find All Possible Routes\"))), React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Routes with Max 4 stops\")))), this.state.onlyPossibleRoutesArr.length > 0 && React.createElement(\"div\", {\n      className: \"list-group font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"We found \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.state.onlyPossibleRoutesArr.length), \" Routes for you.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, routesFormed), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(Col, {\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.showCheapestRoutes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Find the Cheapest Route\"))), React.createElement(Col, {\n      xs: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))), this.state.showCheapestRoutes && React.createElement(\"div\", {\n      className: \"list-group font-label-cheapest\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Take \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, this.state.cheapestRoute.path), \" which will cost you \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, this.state.cheapestRoute.cost)))));\n  }\n\n}\n\nexport default PossibleRoutes;","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","Container","Form","ButtonToolbar","Button","Row","Col","FormLabel","ListGroup","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleRoutesArr","routesArr","cheapestRoute","showCheapestRoutes","errorTxt","showError","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","getCheapestRoute","maxStops","value","toUpperCase","resultSource","test","resultDest","length","console","log","setState","split","onlyRoutesWithMaxFourST","map","route","i","routePerNode","routeWithFourStops","push","formedRoute","routeCostArr","item","costs","totalCost","Number","routeCostObj","sort","a","b","cost","str","newStr","sym","append","render","routesFormed","index","toString","path"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,EAAyCC,MAAzC,EAAiDC,GAAjD,EAAsDC,GAAtD,EAA2DC,SAA3D,EAAsEC,SAAtE,QAAuF,iBAAvF;AACA,OAAO,sBAAP;AACA,SACIC,WADJ,QAEO,0BAFP;AAGA,OACAC,gBADA,MAES,yBAFT;;AAGA,MAAMC,cAAN,SAA6BX,SAA7B,CAAuC;AACnCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,qBAAqB,EAAE,EAFd;AAGTC,MAAAA,SAAS,EAAE,EAHF;AAITC,MAAAA,aAAa,EAAE,EAJN;AAKTC,MAAAA,kBAAkB,EAAE,KALX;AAMTC,MAAAA,QAAQ,EAAE,EAND;AAOTC,MAAAA,SAAS,EAAE;AAPF,KAAb;AASA,SAAKC,QAAL,GAAgBvB,KAAK,CAACwB,SAAN,EAAhB;AACA,SAAKC,SAAL,GAAiBzB,KAAK,CAACwB,SAAN,EAAjB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKP,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBO,IAAxB,CAA6B,IAA7B,CAA1B;AACH;;AAGDD,EAAAA,gBAAgB,CAACI,QAAD,EAAW;AACvB,QAAIP,QAAQ,GAAG,KAAKA,QAAL,CAAcQ,KAAd,CAAoBC,WAApB,EAAf;AACA,QAAIP,SAAS,GAAG,KAAKA,SAAL,CAAeM,KAAf,CAAqBC,WAArB,EAAhB;AACA,UAAMC,YAAY,GAAG,aAAaC,IAAb,CAAkBX,QAAlB,CAArB;AACA,UAAMY,UAAU,GAAG,aAAaD,IAAb,CAAkBT,SAAlB,CAAnB;;AAEA,QAAIF,QAAQ,CAACa,MAAT,KAAoB,CAApB,IAAyBX,SAAS,CAACW,MAAV,KAAqB,CAAlD,EAAqD;AACjDC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAKC,QAAL,CAAc;AAAEjB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,WAAKiB,QAAL,CAAc;AAAElB,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACH,KAJD,MAIM,IAAI,CAACY,YAAD,IAAiB,CAACE,UAAtB,EAAiC;AACnCE,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAKC,QAAL,CAAc;AAAEjB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,WAAKiB,QAAL,CAAc;AAAElB,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACH,KAJK,MAIA,IAAIE,QAAQ,IAAIE,SAAZ,IAAyBQ,YAAzB,IAAyCA,YAA7C,EAA0D;AAC5D,UAAIjB,MAAM,GAAGL,gBAAgB,CAACY,QAAD,EAAUE,SAAV,EAAqBf,WAArB,CAA7B;;AACA,UAAGM,MAAM,KAAK,EAAd,EAAiB;AACb,cAAME,SAAS,GAAGF,MAAM,CAACwB,KAAP,CAAa,GAAb,CAAlB;AACA,cAAMvB,qBAAqB,GAAG,EAA9B;AACA,cAAMwB,uBAAuB,GAAG,EAAhC;AACA,aAAKF,QAAL,CAAc;AAAErB,UAAAA,SAAS,EAAEF;AAAb,SAAd;AACA,aAAKuB,QAAL,CAAc;AAAEjB,UAAAA,SAAS,EAAE;AAAb,SAAd;AAEAJ,QAAAA,SAAS,CAACwB,GAAV,CAAc,CAACC,KAAD,EAAQC,CAAR,KAAc;AACxB,gBAAMC,YAAY,GAAGF,KAAK,CAACH,KAAN,CAAY,GAAZ,CAArB;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,KAAK,CAAzB;;AACA,cAAIA,QAAQ,KAAK,CAAb,IAAkBe,YAAY,CAAC,CAAD,CAAZ,CAAgBT,MAAhB,IAA0B,CAAhD,EAAmD;AAC/C,kBAAMU,kBAAkB,GAAG,KAAKlB,SAAL,CAAeiB,YAAY,CAAC,CAAD,CAA3B,CAA3B;AACAJ,YAAAA,uBAAuB,CAACM,IAAxB,CAA6BD,kBAA7B;AACA,iBAAKP,QAAL,CAAc;AAAEtB,cAAAA,qBAAqB,EAAEwB;AAAzB,aAAd;AACH,WAJD,MAIO;AACH,kBAAMO,WAAW,GAAG,KAAKpB,SAAL,CAAeiB,YAAY,CAAC,CAAD,CAA3B,CAApB;AACA5B,YAAAA,qBAAqB,CAAC8B,IAAtB,CAA2BC,WAA3B;AACA,iBAAKT,QAAL,CAAc;AAAEtB,cAAAA,qBAAqB,EAAEA;AAAzB,aAAd;AACH;;AACD,iBAAO4B,YAAP;AACH,SAbD;AAcA,aAAKhB,gBAAL,CAAsBX,SAAtB;AACH,OAtBD,MAsBM;AAEF,aAAKqB,QAAL,CAAc;AAAEtB,UAAAA,qBAAqB,EAAE;AAAzB,SAAd;AACA,aAAKsB,QAAL,CAAc;AAAElB,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,aAAKkB,QAAL,CAAc;AAAEjB,UAAAA,SAAS,EAAE;AAAb,SAAd;AAEH;AACJ;AACJ;;AAGDO,EAAAA,gBAAgB,CAACb,MAAD,EAAS;AACrB,QAAIiC,YAAY,GAAG,EAAnB;AACAjC,IAAAA,MAAM,CAAC0B,GAAP,CAAYQ,IAAD,IAAU;AAEjBA,MAAAA,IAAI,GAAGA,IAAI,CAACV,KAAL,CAAW,GAAX,CAAP;AACA,UAAIG,KAAK,GAAGO,IAAI,CAAC,CAAD,CAAhB;AACA,UAAIC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAIE,SAAS,GAAG,CAAhB;AAEAD,MAAAA,KAAK,GAAGA,KAAK,CAACX,KAAN,CAAY,GAAZ,CAAR;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAAK,CAACf,MAA1B,EAAkCQ,CAAC,EAAnC,EAAuC;AACnCQ,QAAAA,SAAS,IAAIC,MAAM,CAACF,KAAK,CAACP,CAAD,CAAN,CAAnB;AACH;;AAED,UAAIU,YAAY,GAAG;AAAE,gBAAQX,KAAV;AAAiB,gBAAQS;AAAzB,OAAnB;AACAH,MAAAA,YAAY,CAACF,IAAb,CAAkBO,YAAlB,EAbiB,CAejB;;AACAL,MAAAA,YAAY,CAACM,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,eAAOD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAlB;AACH,OAFD;AAIA,WAAKnB,QAAL,CAAc;AAAEpB,QAAAA,aAAa,EAAE8B,YAAY,CAAC,CAAD;AAA7B,OAAd;AACA,aAAOA,YAAP;AAEH,KAvBD;AAyBH;;AAED7B,EAAAA,kBAAkB,GAAG;AACjB,SAAKmB,QAAL,CAAc;AAAEnB,MAAAA,kBAAkB,EAAE;AAAtB,KAAd;AACH;;AAGDQ,EAAAA,SAAS,CAAC+B,GAAD,EAAM;AACX,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIe,GAAG,CAACvB,MAAJ,GAAa,CAAlC,EAAqCQ,CAAC,EAAtC,EAA0C;AACtC,UAAIiB,GAAG,GAAG,EAAV;;AACA,UAAIjB,CAAC,KAAKe,GAAG,CAACvB,MAAJ,GAAa,CAAvB,EAA0B;AACtByB,QAAAA,GAAG,GAAG,GAAN;AACH;;AAED,UAAIC,MAAM,GAAGH,GAAG,CAACf,CAAD,CAAH,GAASiB,GAAtB;AACAD,MAAAA,MAAM,GAAGA,MAAM,GAAGE,MAAlB;AACH;;AACD,WAAOF,MAAP;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,QAAIC,YAAY,GAAG,EAAnB;;AACA,QAAI,KAAKjD,KAAL,CAAWE,qBAAX,CAAiCmB,MAAjC,GAA0C,CAA9C,EAAiD;AAC7C4B,MAAAA,YAAY,GAAG,KAAKjD,KAAL,CAAWE,qBAAX,CAAiCyB,GAAjC,CAAqC,CAACC,KAAD,EAAQsB,KAAR,KAAkB;AAClE,eAAO,oBAAC,SAAD,CAAW,IAAX;AAAgB,UAAA,GAAG,EAAEtB,KAAK,CAACuB,QAAN,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwCvB,KAAxC,CAAP;AACH,OAFc,CAAf;AAGH;;AAGD,WACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ,CADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,IAAnB;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAoC,MAAA,WAAW,EAAC,QAAhD;AAAyD,MAAA,GAAG,EAAGpB,QAAD,IAAc,KAAKA,QAAL,GAAgBA,QAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CAFJ,EAII,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EASI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAZ,CADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAY,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,IAAnB;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAoC,MAAA,WAAW,EAAC,aAAhD;AAA8D,MAAA,GAAG,EAAGE,SAAD,IAAe,KAAKA,SAAL,GAAiBA,SAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ,CAFJ,EAII,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CATJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,EAgBK,KAAKV,KAAL,CAAWO,SAAX,IAAwB,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA+B,KAAKP,KAAL,CAAWM,QAA1C,CAhB7B,EAkBI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,IAAI,EAAC,IAAjC;AAAsC,MAAA,EAAE,EAAC,cAAzC;AAAwD,MAAA,MAAM,MAA9D;AAA+D,MAAA,OAAO,EAAE,KAAKK,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiC,IAAjC,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,CADJ,CADJ,EAQI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,IAAI,EAAC,IAAjC;AAAsC,MAAA,MAAM,MAA5C;AAA6C,MAAA,OAAO,EAAE,KAAKD,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiC,CAAjC,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,CADJ,CARJ,CAlBJ,EAoCK,KAAKZ,KAAL,CAAWE,qBAAX,CAAiCmB,MAAjC,GAA0C,CAA1C,IAA+C;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKrB,KAAL,CAAWE,qBAAX,CAAiCmB,MAA1C,CAAd,qBAD4C,EAE5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF4C,EAG5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM4B,YAAN,CAH4C,EAI5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ4C,EAK5C,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,IAAI,EAAC,IAAjC;AAAsC,MAAA,MAAM,MAA5C;AAA6C,MAAA,OAAO,EAAE,KAAK5C,kBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,CADJ,CAFJ,EASI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CAL4C,CApCpD,EAyDK,KAAKL,KAAL,CAAWK,kBAAX,IAAiC;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKL,KAAL,CAAWI,aAAX,CAAyBgD,IAAlC,CAAV,2BAA+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKpD,KAAL,CAAWI,aAAX,CAAyBuC,IAAlC,CAA/E,CAD8B,CAzDtC,CADJ,CADJ;AAoEH;;AAnMkC;;AAsMvC,eAAe9C,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './PossibleRoutes.css';\nimport {\n    parsedInput\n} from '../../util/directedGraph';\nimport\ngetPossiblePaths\n    from '../../util/possiblePath';\nclass PossibleRoutes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routes: '',\n            onlyPossibleRoutesArr: [],\n            routesArr: '',\n            cheapestRoute: '',\n            showCheapestRoutes: false,\n            errorTxt: '',\n            showError: false,\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n        this.getCheapestRoute = this.getCheapestRoute.bind(this);\n        this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n    }\n\n\n    getPossibleNodes(maxStops) {\n        let srcInput = this.srcInput.value.toUpperCase();\n        let destInput = this.destInput.value.toUpperCase();\n        const resultSource = /^[A-Za-z]$/.test(srcInput);\n        const resultDest = /^[A-Za-z]$/.test(destInput);\n       \n        if (srcInput.length === 0 || destInput.length === 0) {\n            console.log('no length');\n            this.setState({ showError: true })\n            this.setState({ errorTxt: 'Please provide the source/destination' })\n        }else if (!resultSource || !resultDest){\n            console.log('no match');\n            this.setState({ showError: true });\n            this.setState({ errorTxt: 'Only Alphabets are allowed' })\n        }else if (srcInput && destInput && resultSource && resultSource){\n            var routes = getPossiblePaths(srcInput,destInput, parsedInput);\n            if(routes !== ''){\n                const routesArr = routes.split(';');\n                const onlyPossibleRoutesArr = [];\n                const onlyRoutesWithMaxFourST = [];\n                this.setState({ routesArr: routes });\n                this.setState({ showError: false })\n\n                routesArr.map((route, i) => {\n                    const routePerNode = route.split('=');\n                    console.log(maxStops === 4);\n                    if (maxStops === 4 && routePerNode[0].length <= 5) {\n                        const routeWithFourStops = this.getRoutes(routePerNode[0]);\n                        onlyRoutesWithMaxFourST.push(routeWithFourStops);\n                        this.setState({ onlyPossibleRoutesArr: onlyRoutesWithMaxFourST })\n                    } else {\n                        const formedRoute = this.getRoutes(routePerNode[0]);\n                        onlyPossibleRoutesArr.push(formedRoute);\n                        this.setState({ onlyPossibleRoutesArr: onlyPossibleRoutesArr })\n                    }\n                    return routePerNode;\n                });\n                this.getCheapestRoute(routesArr);\n            }else {\n              \n                this.setState({ onlyPossibleRoutesArr: [] })\n                this.setState({ errorTxt: 'No Such Route' })\n                this.setState({ showError: true });\n               \n            }\n        }    \n    }\n\n\n    getCheapestRoute(routes) {\n        var routeCostArr = [];\n        routes.map((item) => {\n\n            item = item.split('=');\n            var route = item[0];\n            var costs = item[1];\n            var totalCost = 0;\n\n            costs = costs.split(':');\n            for (var i = 0; i < costs.length; i++) {\n                totalCost += Number(costs[i]);\n            }\n\n            var routeCostObj = { 'path': route, 'cost': totalCost };\n            routeCostArr.push(routeCostObj);\n\n            // sort by value\n            routeCostArr.sort(function (a, b) {\n                return a.cost - b.cost;\n            });\n\n            this.setState({ cheapestRoute: routeCostArr[0] })\n            return routeCostArr;\n\n        })\n\n    }\n\n    showCheapestRoutes() {\n        this.setState({ showCheapestRoutes: true })\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        for (var i = 0; i <= str.length - 1; i++) {\n            let sym = '';\n            if (i !== str.length - 1) {\n                sym = \"-\"\n            }\n\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n        return newStr;\n    }\n\n    render() {\n        let routesFormed = '';\n        if (this.state.onlyPossibleRoutesArr.length > 0) {\n            routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n                return <ListGroup.Item key={route.toString()}>{route}</ListGroup.Item>\n            })\n        }\n\n\n        return (\n            <div className=\"pathModule\">\n                <Container className=\"module\" >\n                <br/>\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\">Source : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"source\" ref={(srcInput) => this.srcInput = srcInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\" >Destination : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"destination\" ref={(destInput) => this.destInput = destInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    {this.state.showError && <FormLabel className=\"error\"> {this.state.errorTxt}</FormLabel>}\n\n                    <Row>\n                        <Col xs={3}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" id=\"findNodesBtn\" active onClick={this.getPossibleNodes.bind(this, 'no')}>\n                                    Find All Possible Routes\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n                        <Col xs={4}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" active onClick={this.getPossibleNodes.bind(this, 4)}>\n                                     Routes with Max 4 stops\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n\n                    </Row>\n                    \n                    {this.state.onlyPossibleRoutesArr.length > 0 && <div className=\"list-group font-label\">\n                        <div>We found <strong>{this.state.onlyPossibleRoutesArr.length}</strong> Routes for you.</div>\n                        <br/>\n                        <div>{routesFormed}</div>\n                        <br/>\n                        <Row>\n                            <Col xs={1}></Col>\n                            <Col xs={10}>\n                                <ButtonToolbar>\n                                    <Button variant=\"secondary\" size=\"md\" active onClick={this.showCheapestRoutes}>\n                                       Find the Cheapest Route\n                                </Button>\n                                </ButtonToolbar>\n                            </Col>\n                            <Col xs={1}></Col>\n                        </Row>\n                    </div>}\n\n\n\n\n                    {this.state.showCheapestRoutes && <div className=\"list-group font-label-cheapest\">\n                        <div>Take <strong>{this.state.cheapestRoute.path}</strong> which will cost you <strong>{this.state.cheapestRoute.cost}</strong></div>\n                    </div>}\n\n                </Container>\n\n            </div>\n\n        )\n    }\n}\n\nexport default PossibleRoutes;\n"]},"metadata":{},"sourceType":"module"}