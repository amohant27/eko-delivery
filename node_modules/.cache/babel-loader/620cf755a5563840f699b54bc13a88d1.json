{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleRoutesArr: [],\n      routesArr: '',\n      cheapestRoute: ''\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n    this.getCheapestRoute = this.getCheapestRoute.bind(this);\n  }\n\n  getPossibleNodes(param) {\n    console.log(param);\n    var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n    const routesArr = routes.split(';');\n    const onlyPossibleRoutesArr = [];\n    const onlyRoutesWithMaxFourST = [];\n    this.setState({\n      routesArr: routes\n    });\n    console.log(\"ROUTES\", routes);\n    routesArr.map((route, i) => {\n      const routePerNode = route.split('=');\n      console.log(routePerNode[0]);\n      const formedRoute = this.getRoutes(routePerNode[0]);\n      onlyPossibleRoutesArr.push(formedRoute);\n\n      if (param === 4 && routePerNode[0].length <= 5) {\n        const routeWithFourStops = this.getRoutes(routePerNode[0]);\n        onlyPossibleRoutesArr.push(routeWithFourStops);\n      }\n\n      return routePerNode;\n    });\n    this.getCheapestRoute(routesArr);\n    this.setState({\n      onlyPossibleRoutesArr: onlyPossibleRoutesArr\n    }); // this.setState({ onlyRoutesWithMaxFourST: onlyRoutesWithMaxFourST });\n\n    console.log('only 4 stops', onlyRoutesWithMaxFourST);\n  }\n\n  getCheapestRoute(routes) {\n    var routeCostArr = [];\n    routes.map(item => {\n      item = item.split('=');\n      var route = item[0];\n      var costs = item[1];\n      var totalCost = 0;\n      costs = costs.split(':');\n\n      for (var i = 0; i < costs.length; i++) {\n        totalCost += Number(costs[i]);\n      }\n\n      var routeCostObj = {\n        'path': route,\n        'cost': totalCost\n      };\n      routeCostArr.push(routeCostObj); // sort by value\n\n      routeCostArr.sort(function (a, b) {\n        return a.cost - b.cost;\n      });\n      console.log(routeCostArr);\n      this.setState({\n        cheapestRoute: routeCostArr[0]\n      });\n      return routeCostArr;\n    });\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        sym = \"-\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    let routesFormed = '';\n\n    if (this.state.onlyPossibleRoutesArr.length > 0) {\n      routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n        return React.createElement(\"li\", {\n          key: route.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Route No \", index + 1, \" : \", route);\n      });\n    } // if (this.state.onlyRoutesWithMaxFourST.length > 0) {\n    //     routesFormedWithFourSt = this.state.onlyRoutesWithMaxFourST.map((route, index) => {\n    //         return <li>Route No {index + 1} : {route}</li>;\n    //     })\n    // }\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" Calculate\\u200B \\u200Bthe\\u200B \\u200Bnumber\\u200B \\u200Bof\\u200B \\u200Bpossible\\u200B \\u200Bdelivery\\u200B \\u200Broute\\u200B\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Source : \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \" Destination: \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this, 'no'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Find All PossibleRoutes\"), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Find All PossibleRoutes with 4 max stops\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getCheapestRoute.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Find the Cheapest Route\")), this.state.onlyPossibleRoutesArr.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"We found \", this.state.onlyPossibleRoutesArr.length, \" Routes for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"The number of PossibleRoutes are : \", routesFormed), \"                \"), this.state.onlyPossibleRoutesArr.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"We found the cheapest route for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Take \", this.state.cheapestRoute.path, \" which will cost you \", this.state.cheapestRoute.cost)));\n  }\n\n}\n\nexport default PossibleRoutes;","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleRoutesArr","routesArr","cheapestRoute","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","getCheapestRoute","param","console","log","value","split","onlyRoutesWithMaxFourST","setState","map","route","i","routePerNode","formedRoute","push","length","routeWithFourStops","routeCostArr","item","costs","totalCost","Number","routeCostObj","sort","a","b","cost","str","newStr","sym","append","render","routesFormed","index","toString","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n    parsedInput\n} from '../../util/directedGraph';\nimport\ngetPossiblePaths\n    from '../../util/possiblePath';\nclass PossibleRoutes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routes: '',\n            onlyPossibleRoutesArr: [],\n            routesArr: '',\n            cheapestRoute: '',\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n        this.getCheapestRoute = this.getCheapestRoute.bind(this);\n    }\n\n\n    getPossibleNodes(param) {\n        console.log(param)\n        var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n        const routesArr = routes.split(';');\n        const onlyPossibleRoutesArr = [];\n        const onlyRoutesWithMaxFourST = [];\n        this.setState({ routesArr: routes });\n        console.log(\"ROUTES\",routes)\n\n        routesArr.map((route, i) => {\n            const routePerNode = route.split('=');\n            console.log(routePerNode[0]);\n            const formedRoute = this.getRoutes(routePerNode[0]);\n            onlyPossibleRoutesArr.push(formedRoute);\n            if (param === 4 && routePerNode[0].length <= 5){\n                const routeWithFourStops = this.getRoutes(routePerNode[0]);\n                onlyPossibleRoutesArr.push(routeWithFourStops);\n            }\n            return routePerNode;\n        });\n        this.getCheapestRoute(routesArr);\n        this.setState({ onlyPossibleRoutesArr: onlyPossibleRoutesArr })\n        // this.setState({ onlyRoutesWithMaxFourST: onlyRoutesWithMaxFourST });\n        console.log('only 4 stops', onlyRoutesWithMaxFourST)\n    }\n   \n\n    getCheapestRoute(routes) {\n        var routeCostArr = [];\n        routes.map((item) => {\n\n            item = item.split('=');\n            var route = item[0];\n            var costs = item[1];\n            var totalCost = 0;\n\n            costs = costs.split(':');\n            for (var i = 0; i < costs.length; i++) {\n                totalCost += Number(costs[i]);\n            }\n\n            var routeCostObj = { 'path': route, 'cost': totalCost };\n            routeCostArr.push(routeCostObj);\n\n            // sort by value\n            routeCostArr.sort(function (a, b) {\n                return a.cost - b.cost;\n            });\n\n            console.log(routeCostArr);\n            this.setState({ cheapestRoute: routeCostArr[0] })\n            return routeCostArr;\n\n        })\n\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        for (var i = 0; i <= str.length - 1; i++) {\n            let sym = '';\n            if (i !== str.length - 1) {\n                sym = \"-\"\n            }\n\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n        return newStr;\n    }\n\n    render() {\n        let routesFormed = '';\n        if (this.state.onlyPossibleRoutesArr.length > 0) {\n            routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n                return <li key={route.toString()} >Route No {index + 1} : {route}</li>;\n            })\n        }\n        // if (this.state.onlyRoutesWithMaxFourST.length > 0) {\n        //     routesFormedWithFourSt = this.state.onlyRoutesWithMaxFourST.map((route, index) => {\n        //         return <li>Route No {index + 1} : {route}</li>;\n        //     })\n        // }\n\n        return (\n            <div>\n                <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n                <div>\n                    <label>Source : </label>\n                    <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n                </div>\n                <div>\n                    <label> Destination: </label>\n                    <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n                </div>\n                <div>\n                    <button type=\"button\" onClick={this.getPossibleNodes.bind(this,'no')} >\n                        Find All PossibleRoutes\n                    </button>\n                    <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 4)}>\n                        Find All PossibleRoutes with 4 max stops\n                    </button>\n                </div>\n                <div>\n                    <button type=\"button\" onClick={this.getCheapestRoute.bind(this)} >\n                        Find the Cheapest Route\n                </button>\n                </div>\n\n                {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n                    <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n                    <div>The number of PossibleRoutes are : {routesFormed}</div>\n{/** ≈                <div>The number of PossibleRoutes with 4 station max are : {routesFormedWithFourSt}</div>\n                */}                </div>}\n\n                {this.state.onlyPossibleRoutesArr.length > 0  && <div>\n                    <div>We found the cheapest route for you.</div>\n                    <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n                </div>}\n\n            </div>\n\n\n        )\n    }\n}\n\nexport default PossibleRoutes;"]},"metadata":{},"sourceType":"module"}