{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/DeliveryCost/DeliveryCost.js\";\nimport React, { Component } from 'react';\nimport { inputRouteMap } from '../../util/directedGraph';\nimport './DeliveryCost.css';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel } from 'react-bootstrap';\n\nclass DeliveryCost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      objectGraph: {},\n      routeCost: 0,\n      routesArr: [],\n      errorTxt: 'Route cannot be empty',\n      showError: false\n    };\n    this.pathInput = React.createRef();\n  }\n\n  componentDidMount() {\n    var obj = {}; //AB: 1,AC: 4,AD: 10,BE: 3,CD: 4,CF: 2,DE: 1,EB: 3,EA: 2,FD: 1\n    // parsing the input array to \n\n    inputRouteMap.map(item => {\n      var route = item.substring(0, 2);\n      var cost = item.substring(2);\n      obj[route] = Number(cost);\n      return obj;\n    });\n    this.setState({\n      objectGraph: obj\n    });\n  }\n\n  calcCost() {\n    console.log(this.state.objectGraph);\n    var routesArr = [];\n    var cost = 0;\n    let routeGiven = this.pathInput.value;\n    routeGiven = routeGiven && routeGiven.toUpperCase();\n\n    if (routeGiven && routeGiven.length > 1) {\n      this.setState({\n        showError: false\n      });\n\n      for (var i = 0; i < routeGiven.length - 1; i++) {\n        var newStr = '';\n        newStr = routeGiven.charAt(i) + routeGiven.charAt(i + 1);\n        routesArr.push(newStr);\n        cost = cost + this.state.objectGraph[newStr];\n        this.setState({\n          routesArr: routesArr\n        });\n\n        if (isNaN(cost)) {\n          cost = 'No such Route';\n        }\n\n        this.setState({\n          routeCost: cost\n        });\n      }\n    } else if (routeGiven && routeGiven.length === 1) {\n      this.setState({\n        routeCost: 0\n      });\n      this.setState({\n        showError: true\n      });\n      this.setState({\n        errorTxt: 'Route must consists of more than one route code'\n      });\n    } else {\n      this.setState({\n        showError: true\n      });\n      this.setState({\n        routeCost: 0\n      });\n    }\n\n    return cost;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"costModule\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Col, {\n      xs: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Route: \")), React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      id: \"pathId\",\n      placeholder: \"Please enter the route\",\n      ref: pathInput => {\n        this.pathInput = pathInput;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))), this.state.showError && React.createElement(\"label\", {\n      className: \"error-dc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \" \", this.state.errorTxt), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Col, {\n      xs: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: \"calCost\",\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.calcCost.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Calculate Cost\"))), React.createElement(Col, {\n      xs: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), this.state.routeCost !== 0 && React.createElement(FormLabel, {\n      className: \"font-label-cost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"The cost of the Route = \", this.state.routeCost, \".\")));\n  }\n\n}\n\nexport default DeliveryCost; // <label> Route : </label>\n//     <input type=\"text\" ref={(pathInput) => { this.pathInput = pathInput }} />\n//     <div>\n//         <button type=\"button\" className=\"btn btn-primary\" onClick={this.calcCost.bind(this)}>Calculate Cost</button>\n//     </div>\n//                 {\n//     this.state.routesArr.length > 0 && (<div>\n//         <label> Route  Cost: {this.state.routeCost} </label>\n//     </div>)\n// }","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/DeliveryCost/DeliveryCost.js"],"names":["React","Component","inputRouteMap","Container","Form","ButtonToolbar","Button","Row","Col","FormLabel","DeliveryCost","constructor","props","state","objectGraph","routeCost","routesArr","errorTxt","showError","pathInput","createRef","componentDidMount","obj","map","item","route","substring","cost","Number","setState","calcCost","console","log","routeGiven","value","toUpperCase","length","i","newStr","charAt","push","isNaN","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    inputRouteMap\n} from '../../util/directedGraph';\nimport './DeliveryCost.css';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel } from 'react-bootstrap';\n\nclass DeliveryCost extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            objectGraph: {},\n            routeCost: 0,\n            routesArr: [],\n            errorTxt: 'Route cannot be empty',\n            showError: false,\n        }\n        this.pathInput = React.createRef();\n    }\n\n    componentDidMount() {\n        var obj = {};\n        //AB: 1,AC: 4,AD: 10,BE: 3,CD: 4,CF: 2,DE: 1,EB: 3,EA: 2,FD: 1\n        // parsing the input array to \n        inputRouteMap.map((item) => {\n            var route = item.substring(0, 2);\n            var cost = item.substring(2);\n            obj[route] = Number(cost);\n            return obj;\n        });\n        this.setState({ objectGraph: obj });\n\n    }\n\n    calcCost() {\n        console.log(this.state.objectGraph);\n\n        var routesArr = [];\n        var cost = 0;\n        let routeGiven = this.pathInput.value;\n        routeGiven = routeGiven && routeGiven.toUpperCase();\n\n        if (routeGiven && routeGiven.length > 1) {\n            this.setState({ showError: false })\n            for (var i = 0; i < routeGiven.length - 1; i++) {\n                var newStr = '';\n                newStr = routeGiven.charAt(i) + routeGiven.charAt(i + 1);\n                routesArr.push(newStr);\n                cost = cost + this.state.objectGraph[newStr];\n                this.setState({ routesArr: routesArr });\n                if (isNaN(cost)) {\n                    cost = 'No such Route';\n                }\n                this.setState({ routeCost: cost });\n            }\n        } else if (routeGiven && routeGiven.length === 1){\n            this.setState({ routeCost: 0 })\n            this.setState({ showError: true })\n            this.setState({ errorTxt: 'Route must consists of more than one route code' });\n        }else {\n            this.setState({ showError: true })\n            this.setState({ routeCost: 0 })\n\n        }\n\n        return cost;\n    }\n\n    render() {\n        return (\n            <div className=\"costModule\">\n                <Container>\n                    <Row>\n                        <Col xs={3}></Col>\n                        <Col xs={1}><FormLabel className=\"font-label\">Route: </FormLabel></Col>\n                        <Col xs={4}><Form.Control size=\"md\" type=\"text\" id=\"pathId\" placeholder=\"Please enter the route\"  ref={(pathInput) => { this.pathInput = pathInput }}></Form.Control>\n                        </Col>\n                    </Row>\n                    {this.state.showError && <label className=\"error-dc\"> {this.state.errorTxt}</label>}\n                    <br />\n                    <Row>\n                        <Col xs={5}></Col>\n                        <Col xs={5}>\n                            <ButtonToolbar>\n                                <Button  id=\"calCost\" variant=\"secondary\" size=\"md\" active onClick={this.calcCost.bind(this)}>\n                                    Calculate Cost\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n                        <Col xs={9}></Col>\n                    </Row>\n                    {this.state.routeCost !== 0 && <FormLabel className=\"font-label-cost\">The cost of the Route = {this.state.routeCost}.</FormLabel>}\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default DeliveryCost;\n\n\n// <label> Route : </label>\n//     <input type=\"text\" ref={(pathInput) => { this.pathInput = pathInput }} />\n//     <div>\n//         <button type=\"button\" className=\"btn btn-primary\" onClick={this.calcCost.bind(this)}>Calculate Cost</button>\n//     </div>\n//                 {\n//     this.state.routesArr.length > 0 && (<div>\n//         <label> Route  Cost: {this.state.routeCost} </label>\n//     </div>)\n// }"]},"metadata":{},"sourceType":"module"}