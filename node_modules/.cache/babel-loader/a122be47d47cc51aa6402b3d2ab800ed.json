{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleArr: []\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n  }\n\n  getPossibleNodes() {\n    var routes = getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n    const routesArr = routes.split(';');\n    const onlyPossibleArr = [];\n    routesArr.map((route, i) => {\n      const routePerNode = route.split('=');\n      const formedRoute = this.getRoutes(routePerNode[0]);\n      onlyPossibleArr.push(formedRoute);\n      return routePerNode;\n    });\n    this.setState({\n      onlyPossibleArr: onlyPossibleArr\n    });\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        console.log(i);\n        sym = \"-\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    let routesFormed = '';\n    console.log(this.state.onlyPossibleArr);\n\n    if (this.state.onlyPossibleArr.length > 0) {\n      routesFormed = this.state.onlyPossibleArr.map((route, index) => {\n        return React.createElement(\"li\", {\n          key: route.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Route No \", index + 1, \" : \", route);\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" Calculate\\u200B \\u200Bthe\\u200B \\u200Bnumber\\u200B \\u200Bof\\u200B \\u200Bpossible\\u200B \\u200Bdelivery\\u200B \\u200Broute\\u200B\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Source : \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \" Destination: \"), React.createElement(\"input\", {\n      type: \"text\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Find All PossibleRoutes\"), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.getPossibleNodes.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Find All PossibleRoutes\"), this.state.onlyPossibleArr.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"We found \", this.state.onlyPossibleArr.length, \" Routes for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"The number of PossibleRoutes are : \", routesFormed)));\n  }\n\n}\n\nexport default PossibleRoutes;","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleArr","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","value","routesArr","split","map","route","i","routePerNode","formedRoute","push","setState","str","newStr","length","sym","console","log","append","render","routesFormed","index","toString"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport  {\n    parsedInput\n} from '../../util/directedGraph';\nimport \n    getPossiblePaths\nfrom '../../util/possiblePath';\nclass PossibleRoutes extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            routes : '',\n            onlyPossibleArr:[],\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n    }\n\n    getPossibleNodes(){\n        var routes =  getPossiblePaths(this.srcInput.value, this.destInput.value, parsedInput);\n        const routesArr = routes.split(';');\n        const onlyPossibleArr  = [];\n\n        routesArr.map((route, i) => {\n            const routePerNode = route.split('=');\n            const formedRoute = this.getRoutes(routePerNode[0]);\n            onlyPossibleArr.push(formedRoute);\n            return routePerNode;\n        });\n\n        this.setState({ onlyPossibleArr: onlyPossibleArr})\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        \n        for (var i = 0; i <= str.length - 1; i++) {\n            let sym = '';\n            if (i !== str.length - 1) {\n                console.log(i)\n                sym = \"-\"\n            }\n\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n        return newStr;\n    }\n\n    render(){\n        let routesFormed = '';\n        console.log(this.state.onlyPossibleArr);\n        if(this.state.onlyPossibleArr.length >0){\n            routesFormed = this.state.onlyPossibleArr.map((route,index) => {\n                return <li key={route.toString()} >Route No {index+1} : {route}</li>;\n            })\n        }\n          \n        return(\n                <div>\n                <h3> Calculateâ âtheâ ânumberâ âofâ âpossibleâ âdeliveryâ ârouteâ</h3>\n                <div> \n                <label>Source : </label>\n                    <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n                </div>\n                <div> \n                    <label> Destination: </label>\n                    <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n                </div>\n\n                <button type=\"button\" onClick={this.getPossibleNodes.bind(this)} >\n                    Find All PossibleRoutes\n                </button>\n                <button type=\"button\" onClick={this.getPossibleNodes.bind(this)} >\n                    Find All PossibleRoutes\n                </button>\n\n                {this.state.onlyPossibleArr.length >  0 && <div>\n                    \n                    <div>We found {this.state.onlyPossibleArr.length} Routes for you.</div>\n                    <div>The number of PossibleRoutes are : {routesFormed}</div>\n                     </div>}\n                </div>\n\n                \n        )   \n    }\n}\n\nexport default PossibleRoutes;"]},"metadata":{},"sourceType":"module"}