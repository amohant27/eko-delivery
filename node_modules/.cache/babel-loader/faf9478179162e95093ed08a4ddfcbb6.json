{"ast":null,"code":"export const mainArr = ['AB1', 'AC4', 'AD10', 'BE3', 'CD4', 'CF2', 'DE1', 'EB3', 'EA2', 'FD1'];\nexport const onlyRoutes = mainArr.map(item => {\n  return item.substring(0, 2);\n});\nvar onlyStartPos = mainArr.map(item => {\n  return item.substring(0, 1);\n}); // let uniqueonlyStartPos = onlyStartPos.filter((item, i, ar) => ar.indexOf(item) === i);\n// var graphArr = {};\n// uniqueonlyStartPos.forEach((startPos) => {\n//     graphArr[startPos] = [];\n//     mainArr.forEach((route) => {\n//         if (route.charAt(0) === startPos) {\n//             var newObj = {};\n//             newObj[route.substring(1, 2)] = route.substring(2, route.length);\n//             graphArr[startPos].push(newObj);\n//         }\n//     })\n// });\n// const convertArrayToObject = (obj) => {\n//     var finalNeededObj = {};\n//     // eslint-disable-next-line \n//     Object.keys(obj).map((key) => {\n//         var eachObj = obj[key];\n//         var eachPair = {};\n//         for (var i = 0; i < eachObj.length; i++) {\n//             // eslint-disable-next-line \n//             Object.keys(eachObj[i]).map((key) => {\n//                 eachPair[key] = eachObj[i][key]\n//             })\n//         }\n//         finalNeededObj[key] = eachPair;\n//     })\n//     return finalNeededObj;\n// };\n\nexport const parsedInput = convertArrayToObject(graphArr);","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/util/directedGraph.js"],"names":["mainArr","onlyRoutes","map","item","substring","onlyStartPos","parsedInput","convertArrayToObject","graphArr"],"mappings":"AAEA,OAAO,MAAMA,OAAO,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,CAAhB;AACP,OAAO,MAAMC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAaC,IAAD,IAAU;AAC5C,SAAOA,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAP;AACH,CAFyB,CAAnB;AAIP,IAAIC,YAAY,GAAGL,OAAO,CAACE,GAAR,CAAaC,IAAD,IAAU;AACrC,SAAOA,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAP;AACH,CAFkB,CAAnB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAME,WAAW,GAAGC,oBAAoB,CAACC,QAAD,CAAxC","sourcesContent":["\n\nexport const mainArr = ['AB1', 'AC4', 'AD10', 'BE3', 'CD4', 'CF2', 'DE1', 'EB3', 'EA2', 'FD1'];\nexport const onlyRoutes = mainArr.map((item) => {\n    return item.substring(0, 2);\n})\n\nvar onlyStartPos = mainArr.map((item) => {\n    return item.substring(0, 1);\n});\n\n\n\n// let uniqueonlyStartPos = onlyStartPos.filter((item, i, ar) => ar.indexOf(item) === i);\n// var graphArr = {};\n// uniqueonlyStartPos.forEach((startPos) => {\n//     graphArr[startPos] = [];\n//     mainArr.forEach((route) => {\n//         if (route.charAt(0) === startPos) {\n//             var newObj = {};\n//             newObj[route.substring(1, 2)] = route.substring(2, route.length);\n//             graphArr[startPos].push(newObj);\n//         }\n//     })\n// });\n\n\n\n\n// const convertArrayToObject = (obj) => {\n//     var finalNeededObj = {};\n//     // eslint-disable-next-line \n//     Object.keys(obj).map((key) => {\n//         var eachObj = obj[key];\n//         var eachPair = {};\n//         for (var i = 0; i < eachObj.length; i++) {\n//             // eslint-disable-next-line \n//             Object.keys(eachObj[i]).map((key) => {\n//                 eachPair[key] = eachObj[i][key]\n\n//             })\n//         }\n//         finalNeededObj[key] = eachPair;\n//     })\n//     return finalNeededObj;\n// };\n\n\nexport const parsedInput = convertArrayToObject(graphArr);\n\n"]},"metadata":{},"sourceType":"module"}