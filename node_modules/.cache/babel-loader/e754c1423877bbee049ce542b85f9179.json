{"ast":null,"code":"var _jsxFileName = \"/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './style.css';\nimport { parsedInput } from '../../util/directedGraph';\nimport getPossiblePaths from '../../util/possiblePath';\n\nclass PossibleRoutes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: '',\n      onlyPossibleRoutesArr: [],\n      routesArr: '',\n      cheapestRoute: '',\n      showCheapestRoutes: false\n    };\n    this.srcInput = React.createRef();\n    this.destInput = React.createRef();\n    this.getPossibleNodes = this.getPossibleNodes.bind(this);\n    this.getRoutes = this.getRoutes.bind(this);\n    this.getCheapestRoute = this.getCheapestRoute.bind(this);\n    this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n  }\n\n  getPossibleNodes(maxStops) {\n    if (this.srcInput.value && this.destInput.value) {}\n  }\n\n  getCheapestRoute(routes) {\n    var routeCostArr = [];\n    routes.map(item => {\n      item = item.split('=');\n      var route = item[0];\n      var costs = item[1];\n      var totalCost = 0;\n      costs = costs.split(':');\n\n      for (var i = 0; i < costs.length; i++) {\n        totalCost += Number(costs[i]);\n      }\n\n      var routeCostObj = {\n        'path': route,\n        'cost': totalCost\n      };\n      routeCostArr.push(routeCostObj); // sort by value\n\n      routeCostArr.sort(function (a, b) {\n        return a.cost - b.cost;\n      });\n      console.log(routeCostArr);\n      this.setState({\n        cheapestRoute: routeCostArr[0]\n      });\n      return routeCostArr;\n    });\n  }\n\n  showCheapestRoutes() {\n    this.setState({\n      showCheapestRoutes: true\n    });\n  }\n\n  getRoutes(str) {\n    var newStr = '';\n\n    for (var i = 0; i <= str.length - 1; i++) {\n      let sym = '';\n\n      if (i !== str.length - 1) {\n        sym = \"-\";\n      }\n\n      var append = str[i] + sym;\n      newStr = newStr + append;\n    }\n\n    return newStr;\n  }\n\n  render() {\n    let routesFormed = '';\n\n    if (this.state.onlyPossibleRoutesArr.length > 0) {\n      routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n        // return <li key={route.toString()} >Route No {index + 1} : {route}</li>;\n        return React.createElement(ListGroup.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, route);\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"pathModule\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Source : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"source\",\n      ref: srcInput => this.srcInput = srcInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      className: \"font-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Destination : \")), React.createElement(Col, {\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      size: \"md\",\n      type: \"text\",\n      placeholder: \"destination\",\n      ref: destInput => this.destInput = destInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 'no'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Find All Possible Routes\"))), React.createElement(Col, {\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      size: \"md\",\n      active: true,\n      onClick: this.getPossibleNodes.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Find All PossibleRoutes with 4 max stops\")))), this.state.onlyPossibleRoutesArr.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"We found \", this.state.onlyPossibleRoutesArr.length, \" Routes for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"The number of PossibleRoutes are : \", routesFormed)), this.state.showCheapestRoutes && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"We found the cheapest route for you.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Take \", this.state.cheapestRoute.path, \" which will cost you \", this.state.cheapestRoute.cost))));\n  }\n\n}\n\nexport default PossibleRoutes; //   <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n//                 <div>\n//                     <label>Source : </label>\n//                     <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n//                 </div>\n//                 <div>\n//                     <label> Destination: </label>\n//                     <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 'no')} >\n//                         Find All PossibleRoutes\n//                     </button>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 4)}>\n//                         Find All PossibleRoutes with 4 max stops\n//                     </button>\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.showCheapestRoutes} >\n//                         Find the Cheapest Route\n//                 </button>\n//                 </div>\n//                 {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n//                     <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n//                     <div>The number of PossibleRoutes are : {routesFormed}</div>\n//                 </div>}\n//                 {this.state.showCheapestRoutes && <div>\n//                     <div>We found the cheapest route for you.</div>\n//                     <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n//                 </div>}\n//             </div>","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/components/PossibleRoutes/PossibleRoutes.js"],"names":["React","Component","Container","Form","ButtonToolbar","Button","Row","Col","FormLabel","ListGroup","parsedInput","getPossiblePaths","PossibleRoutes","constructor","props","state","routes","onlyPossibleRoutesArr","routesArr","cheapestRoute","showCheapestRoutes","srcInput","createRef","destInput","getPossibleNodes","bind","getRoutes","getCheapestRoute","maxStops","value","routeCostArr","map","item","split","route","costs","totalCost","i","length","Number","routeCostObj","push","sort","a","b","cost","console","log","setState","str","newStr","sym","append","render","routesFormed","index","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, ButtonToolbar, Button, Row, Col, FormLabel, ListGroup } from 'react-bootstrap';\nimport './style.css';\nimport {\n    parsedInput\n} from '../../util/directedGraph';\nimport\ngetPossiblePaths\n    from '../../util/possiblePath';\nclass PossibleRoutes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routes: '',\n            onlyPossibleRoutesArr: [],\n            routesArr: '',\n            cheapestRoute: '',\n            showCheapestRoutes: false,\n        }\n        this.srcInput = React.createRef();\n        this.destInput = React.createRef();\n        this.getPossibleNodes = this.getPossibleNodes.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n        this.getCheapestRoute = this.getCheapestRoute.bind(this);\n        this.showCheapestRoutes = this.showCheapestRoutes.bind(this);\n    }\n\n\n    getPossibleNodes(maxStops) {\n        if (this.srcInput.value && this.destInput.value){\n\n        }\n      \n    }\n\n\n    getCheapestRoute(routes) {\n        var routeCostArr = [];\n        routes.map((item) => {\n\n            item = item.split('=');\n            var route = item[0];\n            var costs = item[1];\n            var totalCost = 0;\n\n            costs = costs.split(':');\n            for (var i = 0; i < costs.length; i++) {\n                totalCost += Number(costs[i]);\n            }\n\n            var routeCostObj = { 'path': route, 'cost': totalCost };\n            routeCostArr.push(routeCostObj);\n\n            // sort by value\n            routeCostArr.sort(function (a, b) {\n                return a.cost - b.cost;\n            });\n\n            console.log(routeCostArr);\n            this.setState({ cheapestRoute: routeCostArr[0] })\n            return routeCostArr;\n\n        })\n\n    }\n\n    showCheapestRoutes() {\n        this.setState({ showCheapestRoutes: true })\n    }\n\n\n    getRoutes(str) {\n        var newStr = '';\n        for (var i = 0; i <= str.length - 1; i++) {\n            let sym = '';\n            if (i !== str.length - 1) {\n                sym = \"-\"\n            }\n\n            var append = str[i] + sym;\n            newStr = newStr + append;\n        }\n        return newStr;\n    }\n\n    render() {\n        let routesFormed = '';\n        if (this.state.onlyPossibleRoutesArr.length > 0) {\n            routesFormed = this.state.onlyPossibleRoutesArr.map((route, index) => {\n                // return <li key={route.toString()} >Route No {index + 1} : {route}</li>;\n                return <ListGroup.Item>{route}</ListGroup.Item>\n            })\n        }\n\n\n        return (\n            <div>\n                <Container className=\"pathModule\" >\n                <br/>\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\">Source : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"source\" ref={(srcInput) => this.srcInput = srcInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xs={2}><FormLabel className=\"font-label\" >Destination : </FormLabel></Col>\n                        <Col xs={3}><Form.Control size=\"md\" type=\"text\" placeholder=\"destination\" ref={(destInput) => this.destInput = destInput}  ></Form.Control>\n                        </Col>\n                        <Col xs={7}></Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xs={4}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" active onClick={this.getPossibleNodes.bind(this, 'no')}>\n                                    Find All Possible Routes\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n                        <Col xs={7}>\n                            <ButtonToolbar>\n                                <Button variant=\"secondary\" size=\"md\" active onClick={this.getPossibleNodes.bind(this, 4)}>\n                                     Find All PossibleRoutes with 4 max stops\n                                </Button>\n                            </ButtonToolbar>\n                        </Col>\n\n                    </Row>\n\n                    {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n                        <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n                        <div>The number of PossibleRoutes are : {routesFormed}</div>\n                    </div>}\n\n\n                    {this.state.showCheapestRoutes && <div>\n                        <div>We found the cheapest route for you.</div>\n                        <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n                    </div>}\n\n                </Container>\n\n            </div>\n\n        )\n    }\n}\n\nexport default PossibleRoutes;\n\n\n//   <h3> Calculate​ ​the​ ​number​ ​of​ ​possible​ ​delivery​ ​route​</h3>\n//                 <div>\n//                     <label>Source : </label>\n//                     <input type=\"text\" ref={(srcInput) => this.srcInput = srcInput} />\n//                 </div>\n//                 <div>\n//                     <label> Destination: </label>\n//                     <input type=\"text\" ref={(destInput) => this.destInput = destInput} />\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 'no')} >\n//                         Find All PossibleRoutes\n//                     </button>\n//                     <button type=\"button\" onClick={this.getPossibleNodes.bind(this, 4)}>\n//                         Find All PossibleRoutes with 4 max stops\n//                     </button>\n//                 </div>\n//                 <div>\n//                     <button type=\"button\" onClick={this.showCheapestRoutes} >\n//                         Find the Cheapest Route\n//                 </button>\n//                 </div>\n\n//                 {this.state.onlyPossibleRoutesArr.length > 0 && <div>\n//                     <div>We found {this.state.onlyPossibleRoutesArr.length} Routes for you.</div>\n//                     <div>The number of PossibleRoutes are : {routesFormed}</div>\n//                 </div>}\n\n//                 {this.state.showCheapestRoutes && <div>\n//                     <div>We found the cheapest route for you.</div>\n//                     <div>Take {this.state.cheapestRoute.path} which will cost you {this.state.cheapestRoute.cost}</div>\n//                 </div>}\n\n//             </div>"]},"metadata":{},"sourceType":"module"}