{"ast":null,"code":"import _ from 'lodash';\nexport const mainArr = ['AB1', 'AC4', 'AD10', 'BE3', 'CD4', 'CF2', 'DE1', 'EB3', 'EA2', 'FD1'];\nexport const onlyRoutes = mainArr.map(item => {\n  return item.substring(0, 2);\n});\nvar onlyStartPos = mainArr.map(item => {\n  return item.substring(0, 1);\n});\nlet uniqueonlyStartPos = onlyStartPos.filter((item, i, ar) => ar.indexOf(item) === i);\nvar graphArr = {};\nuniqueonlyStartPos.forEach(startPos => {\n  graphArr[startPos] = [];\n  mainArr.forEach(route => {\n    if (route.charAt(0) === startPos) {\n      var newObj = {};\n      newObj[route.substring(1, 2)] = route.substring(2, route.length);\n      graphArr[startPos].push(newObj);\n    }\n  });\n});\n\nconst convertArrayToObject = obj => {\n  var finalNeededObj = {}; // eslint-disable-next-line \n\n  Object.keys(obj).map(key => {\n    var eachObj = obj[key];\n    var eachPair = {};\n\n    for (var i = 0; i < eachObj.length; i++) {\n      // eslint-disable-next-line \n      Object.keys(eachObj[i]).map(key => {\n        eachPair[key] = eachObj[i][key];\n      });\n    }\n\n    finalNeededObj[key] = eachPair;\n  });\n  return finalNeededObj;\n};\n\nexport const parsedInput = convertArrayToObject(graphArr);\nconst inputRoutesStr = 'AB1, AC4, AD10, BE3, CD4, CF2, DE1, EB3, EA2, FD1';\n\nfunction createGraph(inputRoutesStr) {\n  let routesGraph = {};\n\n  const inputRoutes = _.map(inputRoutesStr.split(','), _.trim);\n\n  _.forEach(inputRoutes, route => {\n    let fromTown = route.charAt(0).toUpperCase();\n    let toTown = route.charAt(1).toUpperCase();\n    let cost = parseInt(route.substr(2));\n\n    if (cost !== 0) {\n      if (_.has(routesGraph, fromTown)) {\n        routesGraph[fromTown].push({\n          [toTown]: cost\n        });\n      } else {\n        routesGraph[fromTown] = [{\n          [toTown]: cost\n        }];\n      }\n    }\n  });\n\n  return routesGraph;\n}\n\nconsole.log(createGraph(inputRoutesStr));\n\nfunction findNumberPossibleRoutes(start, dest, stops) {\n  let fromTown = start || '';\n  let toTown = dest || '';\n  let sameRoute = sameRoute || false;\n  let maxDeliveryCost = maxDeliveryCost || Number.MAX_SAFE_INTEGER;\n  let maxStops = stops || Number.MAX_SAFE_INTEGER;\n  this.possibleRoutes = 0;\n  this.cheapestDelivery = Number.MAX_SAFE_INTEGER; // Checking is one of the town is empty\n\n  if (fromTown.trim().length === 0 || toTown.trim().length === 0) return 0;\n  fromTown = fromTown.toUpperCase();\n  toTown = toTown.toUpperCase();\n  let routes = this.routesGraph[fromTown];\n  let isVisitedNode = [];\n  let path = '';\n\n  for (let curr of routes) {\n    let currentTown = Object.keys(curr)[0];\n    let currentStops = 1;\n    let dC = curr[currentTown];\n    this.findRoutes(path, isVisitedNode, currentTown, toTown, maxStops, currentStops, dC, 0, maxDeliveryCost, sameRoute);\n  }\n\n  return this.possibleRoutes;\n}\n\nfindNumberPossibleRoutes('E', 'D', 4);","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/util/directedGraph.js"],"names":["_","mainArr","onlyRoutes","map","item","substring","onlyStartPos","uniqueonlyStartPos","filter","i","ar","indexOf","graphArr","forEach","startPos","route","charAt","newObj","length","push","convertArrayToObject","obj","finalNeededObj","Object","keys","key","eachObj","eachPair","parsedInput","inputRoutesStr","createGraph","routesGraph","inputRoutes","split","trim","fromTown","toUpperCase","toTown","cost","parseInt","substr","has","console","log","findNumberPossibleRoutes","start","dest","stops","sameRoute","maxDeliveryCost","Number","MAX_SAFE_INTEGER","maxStops","possibleRoutes","cheapestDelivery","routes","isVisitedNode","path","curr","currentTown","currentStops","dC","findRoutes"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AAGA,OAAO,MAAMC,OAAO,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,CAAhB;AACP,OAAO,MAAMC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAaC,IAAD,IAAU;AAC5C,SAAOA,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAP;AACH,CAFyB,CAAnB;AAIP,IAAIC,YAAY,GAAGL,OAAO,CAACE,GAAR,CAAaC,IAAD,IAAU;AACrC,SAAOA,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAP;AACH,CAFkB,CAAnB;AAMA,IAAIE,kBAAkB,GAAGD,YAAY,CAACE,MAAb,CAAoB,CAACJ,IAAD,EAAOK,CAAP,EAAUC,EAAV,KAAiBA,EAAE,CAACC,OAAH,CAAWP,IAAX,MAAqBK,CAA1D,CAAzB;AACA,IAAIG,QAAQ,GAAG,EAAf;AACAL,kBAAkB,CAACM,OAAnB,CAA4BC,QAAD,IAAc;AACrCF,EAAAA,QAAQ,CAACE,QAAD,CAAR,GAAqB,EAArB;AACAb,EAAAA,OAAO,CAACY,OAAR,CAAiBE,KAAD,IAAW;AACvB,QAAIA,KAAK,CAACC,MAAN,CAAa,CAAb,MAAoBF,QAAxB,EAAkC;AAC9B,UAAIG,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACF,KAAK,CAACV,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAN,GAAgCU,KAAK,CAACV,SAAN,CAAgB,CAAhB,EAAmBU,KAAK,CAACG,MAAzB,CAAhC;AACAN,MAAAA,QAAQ,CAACE,QAAD,CAAR,CAAmBK,IAAnB,CAAwBF,MAAxB;AACH;AACJ,GAND;AAOH,CATD;;AAcA,MAAMG,oBAAoB,GAAIC,GAAD,IAAS;AAClC,MAAIC,cAAc,GAAG,EAArB,CADkC,CAElC;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBlB,GAAjB,CAAsBsB,GAAD,IAAS;AAC1B,QAAIC,OAAO,GAAGL,GAAG,CAACI,GAAD,CAAjB;AACA,QAAIE,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,OAAO,CAACR,MAA5B,EAAoCT,CAAC,EAArC,EAAyC;AACrC;AACAc,MAAAA,MAAM,CAACC,IAAP,CAAYE,OAAO,CAACjB,CAAD,CAAnB,EAAwBN,GAAxB,CAA6BsB,GAAD,IAAS;AACjCE,QAAAA,QAAQ,CAACF,GAAD,CAAR,GAAgBC,OAAO,CAACjB,CAAD,CAAP,CAAWgB,GAAX,CAAhB;AAEH,OAHD;AAIH;;AACDH,IAAAA,cAAc,CAACG,GAAD,CAAd,GAAsBE,QAAtB;AACH,GAXD;AAYA,SAAOL,cAAP;AACH,CAhBD;;AAmBA,OAAO,MAAMM,WAAW,GAAGR,oBAAoB,CAACR,QAAD,CAAxC;AAIP,MAAMiB,cAAc,GAAG,mDAAvB;;AACA,SAASC,WAAT,CAAqBD,cAArB,EAAqC;AACjC,MAAIE,WAAW,GAAG,EAAlB;;AACA,QAAMC,WAAW,GAAGhC,CAAC,CAACG,GAAF,CAAM0B,cAAc,CAACI,KAAf,CAAqB,GAArB,CAAN,EAAiCjC,CAAC,CAACkC,IAAnC,CAApB;;AACAlC,EAAAA,CAAC,CAACa,OAAF,CAAUmB,WAAV,EAAwBjB,KAAD,IAAW;AAC9B,QAAIoB,QAAQ,GAAGpB,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBoB,WAAhB,EAAf;AACA,QAAIC,MAAM,GAAGtB,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBoB,WAAhB,EAAb;AACA,QAAIE,IAAI,GAAGC,QAAQ,CAACxB,KAAK,CAACyB,MAAN,CAAa,CAAb,CAAD,CAAnB;;AACA,QAAIF,IAAI,KAAK,CAAb,EAAgB;AACZ,UAAItC,CAAC,CAACyC,GAAF,CAAMV,WAAN,EAAmBI,QAAnB,CAAJ,EAAkC;AAC9BJ,QAAAA,WAAW,CAACI,QAAD,CAAX,CAAsBhB,IAAtB,CAA2B;AAAE,WAACkB,MAAD,GAAUC;AAAZ,SAA3B;AACH,OAFD,MAEO;AACHP,QAAAA,WAAW,CAACI,QAAD,CAAX,GAAwB,CAAC;AAAE,WAACE,MAAD,GAAUC;AAAZ,SAAD,CAAxB;AACH;AACJ;AAEJ,GAZD;;AAaA,SAAOP,WAAP;AACH;;AAEDW,OAAO,CAACC,GAAR,CAAYb,WAAW,CAACD,cAAD,CAAvB;;AAGA,SAASe,wBAAT,CAAkCC,KAAlC,EAAwCC,IAAxC,EAA8CC,KAA9C,EAAoD;AAChD,MAAIZ,QAAQ,GAAGU,KAAK,IAAI,EAAxB;AACA,MAAIR,MAAM,GAAGS,IAAI,IAAI,EAArB;AACA,MAAIE,SAAS,GAAGA,SAAS,IAAI,KAA7B;AACA,MAAIC,eAAe,GAAGA,eAAe,IAAIC,MAAM,CAACC,gBAAhD;AACA,MAAIC,QAAQ,GAAGL,KAAK,IAAIG,MAAM,CAACC,gBAA/B;AAGA,OAAKE,cAAL,GAAsB,CAAtB;AACA,OAAKC,gBAAL,GAAwBJ,MAAM,CAACC,gBAA/B,CATgD,CAWhD;;AACA,MAAIhB,QAAQ,CAACD,IAAT,GAAgBhB,MAAhB,KAA2B,CAA3B,IAAgCmB,MAAM,CAACH,IAAP,GAAchB,MAAd,KAAyB,CAA7D,EACI,OAAO,CAAP;AACJiB,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,WAAT,EAAX;AACAC,EAAAA,MAAM,GAAGA,MAAM,CAACD,WAAP,EAAT;AAEA,MAAImB,MAAM,GAAG,KAAKxB,WAAL,CAAiBI,QAAjB,CAAb;AACA,MAAIqB,aAAa,GAAG,EAApB;AAEA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,IAAT,IAAiBH,MAAjB,EAAyB;AACrB,QAAII,WAAW,GAAGpC,MAAM,CAACC,IAAP,CAAYkC,IAAZ,EAAkB,CAAlB,CAAlB;AACA,QAAIE,YAAY,GAAG,CAAnB;AACA,QAAIC,EAAE,GAAGH,IAAI,CAACC,WAAD,CAAb;AACA,SAAKG,UAAL,CAAgBL,IAAhB,EAAsBD,aAAtB,EAAqCG,WAArC,EAAkDtB,MAAlD,EAA0De,QAA1D,EAAoEQ,YAApE,EAAkFC,EAAlF,EAAsF,CAAtF,EAAyFZ,eAAzF,EAA0GD,SAA1G;AACH;;AACD,SAAO,KAAKK,cAAZ;AACH;;AAEDT,wBAAwB,CAAC,GAAD,EAAM,GAAN,EAAU,CAAV,CAAxB","sourcesContent":["import _ from 'lodash';\n\n\nexport const mainArr = ['AB1', 'AC4', 'AD10', 'BE3', 'CD4', 'CF2', 'DE1', 'EB3', 'EA2', 'FD1'];\nexport const onlyRoutes = mainArr.map((item) => {\n    return item.substring(0, 2);\n})\n\nvar onlyStartPos = mainArr.map((item) => {\n    return item.substring(0, 1);\n});\n\n\n\nlet uniqueonlyStartPos = onlyStartPos.filter((item, i, ar) => ar.indexOf(item) === i);\nvar graphArr = {};\nuniqueonlyStartPos.forEach((startPos) => {\n    graphArr[startPos] = [];\n    mainArr.forEach((route) => {\n        if (route.charAt(0) === startPos) {\n            var newObj = {};\n            newObj[route.substring(1, 2)] = route.substring(2, route.length);\n            graphArr[startPos].push(newObj);\n        }\n    })\n});\n\n\n\n\nconst convertArrayToObject = (obj) => {\n    var finalNeededObj = {};\n    // eslint-disable-next-line \n    Object.keys(obj).map((key) => {\n        var eachObj = obj[key];\n        var eachPair = {};\n        for (var i = 0; i < eachObj.length; i++) {\n            // eslint-disable-next-line \n            Object.keys(eachObj[i]).map((key) => {\n                eachPair[key] = eachObj[i][key]\n\n            })\n        }\n        finalNeededObj[key] = eachPair;\n    })\n    return finalNeededObj;\n};\n\n\nexport const parsedInput = convertArrayToObject(graphArr);\n\n\n\nconst inputRoutesStr = 'AB1, AC4, AD10, BE3, CD4, CF2, DE1, EB3, EA2, FD1';\nfunction createGraph(inputRoutesStr) {\n    let routesGraph = {}\n    const inputRoutes = _.map(inputRoutesStr.split(','), _.trim);\n    _.forEach(inputRoutes, (route) => {\n        let fromTown = route.charAt(0).toUpperCase();\n        let toTown = route.charAt(1).toUpperCase();\n        let cost = parseInt(route.substr(2));\n        if (cost !== 0) {\n            if (_.has(routesGraph, fromTown)) {\n                routesGraph[fromTown].push({ [toTown]: cost });\n            } else {\n                routesGraph[fromTown] = [{ [toTown]: cost }];\n            }\n        }\n\n    });\n    return routesGraph;\n}\n\nconsole.log(createGraph(inputRoutesStr));\n\n\nfunction findNumberPossibleRoutes(start,dest, stops){\n    let fromTown = start || '';\n    let toTown = dest || '';\n    let sameRoute = sameRoute || false;\n    let maxDeliveryCost = maxDeliveryCost || Number.MAX_SAFE_INTEGER;\n    let maxStops = stops || Number.MAX_SAFE_INTEGER;\n\n\n    this.possibleRoutes = 0;\n    this.cheapestDelivery = Number.MAX_SAFE_INTEGER;\n\n    // Checking is one of the town is empty\n    if (fromTown.trim().length === 0 || toTown.trim().length === 0)\n        return 0;\n    fromTown = fromTown.toUpperCase();\n    toTown = toTown.toUpperCase();\n\n    let routes = this.routesGraph[fromTown];\n    let isVisitedNode = [];\n\n    let path = ''\n    for (let curr of routes) {\n        let currentTown = Object.keys(curr)[0];\n        let currentStops = 1;\n        let dC = curr[currentTown];\n        this.findRoutes(path, isVisitedNode, currentTown, toTown, maxStops, currentStops, dC, 0, maxDeliveryCost, sameRoute);\n    }\n    return this.possibleRoutes;\n}\n\nfindNumberPossibleRoutes('E' ,'D',4);"]},"metadata":{},"sourceType":"module"}