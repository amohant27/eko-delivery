{"ast":null,"code":"export default function getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n  const edges = graph[start];\n\n  if (visitRoute && start === end) {\n    // We found the path\n    console.log('we found the path' + visitRoute + end + '=' + count);\n    return visitRoute + end + '=' + count;\n  }\n\n  if (!edges) {\n    console.log('we hit deadend , all nodes visited');\n    return '';\n  }\n\n  if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n    console.log('visitRoute if present index', visitRoute);\n    console.log(' already visited route we dont allow since it ll go in infiinte cycle');\n    return '';\n  }\n\n  visitRoute += start;\n  return Object.keys(edges).map(node => {\n    console.log('NODE', node, edges); // No 0 cost routes should be included as per requirements\n\n    if (edges[node] === 0) {\n      return '';\n    }\n\n    console.log('calling recursively with node , end, visitRoute', node, end, visitRoute);\n    const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node] + ':');\n    console.log('loop ended for node', node);\n    console.log('****************************************');\n    return route;\n  }).filter(empty => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}","map":{"version":3,"sources":["/Users/ananya/Documents/Learnings/Coding/Eko_Delivery/my-app/src/util/possiblePath.js"],"names":["getPossiblePaths","start","end","graph","visitRoute","count","edges","console","log","indexOf","length","Object","keys","map","node","route","filter","empty","join"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,KAAtC,EAA6CC,UAAU,GAAG,EAA1D,EAA8DC,KAAK,GAAG,CAAtE,EAAyE;AACpF,QAAMC,KAAK,GAAGH,KAAK,CAACF,KAAD,CAAnB;;AAGA,MAAIG,UAAU,IAAIH,KAAK,KAAKC,GAA5B,EAAiC;AAC7B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBJ,UAArB,GAAkCF,GAAlC,GAAwC,GAAxC,GAA8CG,KAA1D;AACA,WAAOD,UAAU,GAAGF,GAAb,GAAmB,GAAnB,GAAyBG,KAAhC;AACH;;AAED,MAAI,CAACC,KAAL,EAAY;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAO,EAAP;AACH;;AACA,MAAIJ,UAAU,CAACK,OAAX,CAAmBL,UAAU,CAACA,UAAU,CAACM,MAAX,GAAoB,CAArB,CAAV,GAAoCT,KAAvD,KAAiE,CAArE,EAAwE;AACrEM,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CJ,UAA3C;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,uEAAZ;AACA,WAAO,EAAP;AACH;;AAGDJ,EAAAA,UAAU,IAAIH,KAAd;AAEA,SAAOU,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAwBC,IAAD,IAAU;AACpCP,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBM,IAAnB,EAAwBR,KAAxB,EADoC,CAEpC;;AACA,QAAIA,KAAK,CAACQ,IAAD,CAAL,KAAgB,CAApB,EAAuB;AACnB,aAAO,EAAP;AACH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+DM,IAA/D,EAAqEZ,GAArE,EAAyEE,UAAzE;AACA,UAAMW,KAAK,GAAGf,gBAAgB,CAACc,IAAD,EAAOZ,GAAP,EAAYC,KAAZ,EAAmBC,UAAnB,EAA+BC,KAAK,GAAGC,KAAK,CAACQ,IAAD,CAAb,GAAqB,GAApD,CAA9B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCM,IAAnC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACA,WAAOO,KAAP;AACH,GAXM,EAWJC,MAXI,CAWIC,KAAD,IAAW,CAAC,CAACA,KAXhB,EAWuBC,IAXvB,CAW4B,GAX5B,CAAP,CAvBoF,CAkC3C;AAC5C","sourcesContent":["export default function getPossiblePaths(start, end, graph, visitRoute = '', count = 0) {\n    const edges = graph[start];\n   \n    \n    if (visitRoute && start === end) {\n        // We found the path\n        console.log('we found the path'+ visitRoute + end + '=' + count)\n        return visitRoute + end + '=' + count;\n    }\n\n    if (!edges) {\n        console.log('we hit deadend , all nodes visited')\n        return '';\n    }\n     if (visitRoute.indexOf(visitRoute[visitRoute.length - 1] + start) >= 0) {\n        console.log('visitRoute if present index', visitRoute);\n        console.log(' already visited route we dont allow since it ll go in infiinte cycle');\n        return '';\n    }\n\n\n    visitRoute += start;\n\n    return Object.keys(edges).map((node) => {\n        console.log('NODE',node,edges);\n        // No 0 cost routes should be included as per requirements\n        if (edges[node] === 0) {\n            return '';\n        }  \n        console.log('calling recursively with node , end, visitRoute', node, end,visitRoute)\n        const route = getPossiblePaths(node, end, graph, visitRoute, count + edges[node] +':');\n        console.log('loop ended for node', node)\n        console.log('****************************************',);\n        return route;\n    }).filter((empty) => !!empty).join(';'); // Filter the routes (empty str) which had deadend\n}\n"]},"metadata":{},"sourceType":"module"}